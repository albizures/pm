/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getGitStatus(path: string) {
    return invoke()<GitStatusEntry[]>("get_git_status", { path })
}

export function getProjectsWithUncommittedChanges() {
    return invoke()<GitProjectEntry[]>("get_projects_with_uncommitted_changes")
}

export function getProjectGitData(path: string) {
    return invoke()<ProjectGitData>("get_project_git_data", { path })
}

export function isPathIgnored(path: string, pathToCheck: string) {
    return invoke()<boolean>("is_path_ignored", { path,pathToCheck })
}

export type GitStatusEntry = { file: string; status: GitStatus }
export type GitStatus = "Untracked" | "Modified" | "Deleted" | "Renamed" | "Conflicted"
export type ProjectType = "Javascript" | "Rust" | "Elixir" | "Gleam" | "Python" | "Git" | "Erlang"
export type GitProjectEntry = { project: ProjectEntry; changes: GitStatusEntry[] }
export type ProjectGitData = { remoteOrigin: string | null; changes: GitStatusEntry[]; branches: string[]; currentBranch: string | null; commitCount: number; lastCommitDate: number }
export type ProjectEntry = { name: string; path: string; created: number; modified: number; size: number; deps_size: number; types: ProjectType[] }
